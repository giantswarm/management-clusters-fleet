# This is an auto-generated file. DO NOT EDIT
apiVersion: v1
kind: Namespace
metadata:
  name: flux-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: helm-controller
  namespace: flux-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: image-automation-controller
  namespace: flux-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: image-reflector-controller
  namespace: flux-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: kustomize-controller
  namespace: flux-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: notification-controller
  namespace: flux-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: source-controller
  namespace: flux-system
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: flux-app-pvc-psp
spec:
  allowPrivilegeEscalation: false
  fsGroup:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  privileged: false
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  volumes:
  - emptyDir
  - secret
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: crd-controller
rules:
- apiGroups:
  - source.toolkit.fluxcd.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - kustomize.toolkit.fluxcd.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - helm.toolkit.fluxcd.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - notification.toolkit.fluxcd.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - image.toolkit.fluxcd.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - namespaces
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - configmaps
  - configmaps/status
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - policy
  resourceNames:
  - flux-app-pvc-psp
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flux-crd-watcher
rules:
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - source.toolkit.fluxcd.io
  resources:
  - '*'
  verbs:
  - list
  - watch
- apiGroups:
  - kustomize.toolkit.fluxcd.io
  resources:
  - '*'
  verbs:
  - list
  - watch
- apiGroups:
  - helm.toolkit.fluxcd.io
  resources:
  - '*'
  verbs:
  - list
  - watch
- apiGroups:
  - notification.toolkit.fluxcd.io
  resources:
  - '*'
  verbs:
  - list
  - watch
- apiGroups:
  - image.toolkit.fluxcd.io
  resources:
  - '*'
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: flux-crd-controller
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: crd-controller
subjects:
- kind: ServiceAccount
  name: automation
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: flux-crd-controller-sa
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: crd-controller
subjects:
- kind: ServiceAccount
  name: helm-controller
  namespace: flux-system
- kind: ServiceAccount
  name: image-automation-controller
  namespace: flux-system
- kind: ServiceAccount
  name: image-reflector-controller
  namespace: flux-system
- kind: ServiceAccount
  name: kustomize-controller
  namespace: flux-system
- kind: ServiceAccount
  name: notification-controller
  namespace: flux-system
- kind: ServiceAccount
  name: source-controller
  namespace: flux-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: cluster-reconciler
  namespace: flux-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: kustomize-controller
  namespace: flux-system
- kind: ServiceAccount
  name: helm-controller
  namespace: flux-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: crd-controller
  namespace: flux-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: crd-controller
subjects:
- kind: ServiceAccount
  name: kustomize-controller
  namespace: flux-system
- kind: ServiceAccount
  name: helm-controller
  namespace: flux-system
- kind: ServiceAccount
  name: source-controller
  namespace: flux-system
- kind: ServiceAccount
  name: notification-controller
  namespace: flux-system
- kind: ServiceAccount
  name: image-reflector-controller
  namespace: flux-system
- kind: ServiceAccount
  name: image-automation-controller
  namespace: flux-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flux-crd-watcher
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flux-crd-watcher
subjects:
- kind: ServiceAccount
  name: helm-controller
  namespace: flux-system
- kind: ServiceAccount
  name: image-automation-controller
  namespace: flux-system
- kind: ServiceAccount
  name: image-reflector-controller
  namespace: flux-system
- kind: ServiceAccount
  name: kustomize-controller
  namespace: flux-system
- kind: ServiceAccount
  name: notification-controller
  namespace: flux-system
- kind: ServiceAccount
  name: source-controller
  namespace: flux-system
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    giantswarm.io/monitoring-path: /metrics
    giantswarm.io/monitoring-port: "8080"
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/monitoring: "true"
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: customer-flux-monitoring
  namespace: flux-system
spec:
  clusterIP: None
  ports:
  - port: 8080
    protocol: TCP
    targetPort: http-prom
  selector:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: notification-controller
  namespace: flux-system
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app: notification-controller
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: source-controller
  namespace: flux-system
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app: source-controller
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: webhook-receiver
  namespace: flux-system
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http-webhook
  selector:
    app: notification-controller
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: helm-controller
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: helm-controller
  namespace: flux-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: helm-controller
      app.kubernetes.io/instance: customer-flux
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: flux-app
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: helm-controller
        app.kubernetes.io/instance: customer-flux
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: flux-app
        app.kubernetes.io/version: 0.27.3
        giantswarm.io/service_type: managed
        helm.sh/chart: flux-app-0.10.0
    spec:
      containers:
      - args:
        - --events-addr=http://notification-controller/
        - --watch-all-namespaces
        - --log-level=info
        - --log-encoding=json
        - --enable-leader-election
        env:
        - name: RUNTIME_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: docker.io/giantswarm/fluxcd-helm-controller:v0.17.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        name: manager
        ports:
        - containerPort: 8080
          name: http-prom
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 100
        volumeMounts:
        - mountPath: /tmp
          name: temp
      serviceAccountName: helm-controller
      terminationGracePeriodSeconds: 600
      volumes:
      - emptyDir: {}
        name: temp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: image-automation-controlller
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: image-automation-controller
  namespace: flux-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: image-automation-controller
      app.kubernetes.io/instance: customer-flux
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: flux-app
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: image-automation-controller
        app.kubernetes.io/instance: customer-flux
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: flux-app
        app.kubernetes.io/version: 0.27.3
        giantswarm.io/service_type: managed
        helm.sh/chart: flux-app-0.10.0
    spec:
      containers:
      - args:
        - --events-addr=http://notification-controller/
        - --watch-all-namespaces
        - --log-level=info
        - --log-encoding=json
        - --enable-leader-election
        env:
        - name: RUNTIME_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: docker.io/giantswarm/fluxcd-image-automation-controller:v0.20.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        name: manager
        ports:
        - containerPort: 8080
          name: http-prom
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 100
        volumeMounts:
        - mountPath: /tmp
          name: temp
      securityContext:
        fsGroup: 1337
      serviceAccountName: image-automation-controller
      terminationGracePeriodSeconds: 10
      volumes:
      - emptyDir: {}
        name: temp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: image-reflector-controller
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: image-reflector-controller
  namespace: flux-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: image-reflector-controller
      app.kubernetes.io/instance: customer-flux
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: flux-app
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: image-reflector-controller
        app.kubernetes.io/instance: customer-flux
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: flux-app
        app.kubernetes.io/version: 0.27.3
        giantswarm.io/service_type: managed
        helm.sh/chart: flux-app-0.10.0
    spec:
      containers:
      - args:
        - --events-addr=http://notification-controller/
        - --watch-all-namespaces
        - --log-level=info
        - --log-encoding=json
        - --enable-leader-election
        env:
        - name: RUNTIME_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: docker.io/giantswarm/fluxcd-image-reflector-controller:v0.16.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        name: manager
        ports:
        - containerPort: 8080
          name: http-prom
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 100
        volumeMounts:
        - mountPath: /tmp
          name: temp
        - mountPath: /data
          name: data
      securityContext:
        fsGroup: 1337
      serviceAccountName: image-reflector-controller
      terminationGracePeriodSeconds: 10
      volumes:
      - emptyDir: {}
        name: temp
      - emptyDir: {}
        name: data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kustomize-controller
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: kustomize-controller
  namespace: flux-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kustomize-controller
      app.kubernetes.io/instance: customer-flux
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: flux-app
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: kustomize-controller
        app.kubernetes.io/instance: customer-flux
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: flux-app
        app.kubernetes.io/version: 0.27.3
        giantswarm.io/service_type: managed
        helm.sh/chart: flux-app-0.10.0
    spec:
      containers:
      - args:
        - --events-addr=http://notification-controller/
        - --watch-all-namespaces
        - --log-level=info
        - --log-encoding=json
        - --enable-leader-election
        env:
        - name: RUNTIME_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: docker.io/giantswarm/fluxcd-kustomize-controller:v0.21.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        name: manager
        ports:
        - containerPort: 8080
          name: http-prom
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 100
        volumeMounts:
        - mountPath: /tmp
          name: temp
      securityContext:
        fsGroup: 1337
      serviceAccountName: kustomize-controller
      terminationGracePeriodSeconds: 60
      volumes:
      - emptyDir: {}
        name: temp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: notification-controller
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: notification-controller
  namespace: flux-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notification-controller
      app.kubernetes.io/instance: customer-flux
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: flux-app
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: notification-controller
        app.kubernetes.io/instance: customer-flux
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: flux-app
        app.kubernetes.io/version: 0.27.3
        giantswarm.io/service_type: managed
        helm.sh/chart: flux-app-0.10.0
    spec:
      containers:
      - args:
        - --watch-all-namespaces
        - --log-level=info
        - --log-encoding=json
        - --enable-leader-election
        env:
        - name: RUNTIME_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: docker.io/giantswarm/fluxcd-notification-controller:v0.22.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        name: manager
        ports:
        - containerPort: 9090
          name: http
          protocol: TCP
        - containerPort: 9292
          name: http-webhook
          protocol: TCP
        - containerPort: 8080
          name: http-prom
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 100
        volumeMounts:
        - mountPath: /tmp
          name: temp
      serviceAccountName: notification-controller
      terminationGracePeriodSeconds: 10
      volumes:
      - emptyDir: {}
        name: temp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: source-controller
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    control-plane: controller
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: source-controller
  namespace: flux-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: source-controller
      app.kubernetes.io/instance: customer-flux
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: flux-app
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app: source-controller
        app.kubernetes.io/instance: customer-flux
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: flux-app
        app.kubernetes.io/version: 0.27.3
        giantswarm.io/service_type: managed
        helm.sh/chart: flux-app-0.10.0
    spec:
      containers:
      - args:
        - --events-addr=http://notification-controller/
        - --watch-all-namespaces
        - --log-level=info
        - --log-encoding=json
        - --enable-leader-election
        - --storage-path=/data
        - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc
        env:
        - name: RUNTIME_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: docker.io/giantswarm/fluxcd-source-controller:v0.21.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        name: manager
        ports:
        - containerPort: 9090
          name: http
          protocol: TCP
        - containerPort: 8080
          name: http-prom
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: http
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 100
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /tmp
          name: tmp
      securityContext:
        fsGroup: 1337
      serviceAccountName: source-controller
      terminationGracePeriodSeconds: 10
      volumes:
      - emptyDir: {}
        name: data
      - emptyDir: {}
        name: tmp
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: flux-multi-tenancy
spec:
  rules:
  - exclude:
      resources:
        namespaces:
        - flux-system
        - flux-giantswarm
        - giantswarm
        - monitoring
    match:
      resources:
        kinds:
        - Kustomization
        - HelmRelease
    name: serviceAccountNameMustBeSet
    validate:
      message: .spec.serviceAccountName is required
      pattern:
        spec:
          serviceAccountName: ?*
  - exclude:
      resources:
        namespaces:
        - flux-system
        - flux-giantswarm
        - giantswarm
        - monitoring
    match:
      resources:
        kinds:
        - Kustomization
    name: kustomizationSourceRefNamespaceIsSafe
    preconditions:
      any:
      - key: '{{request.object.spec.sourceRef.namespace}}'
        operator: NotEquals
        value: ""
    validate:
      deny:
        conditions:
          all:
          - key: '{{request.object.spec.sourceRef.namespace}}'
            operator: NotEquals
            value: '{{request.object.metadata.namespace}}'
          - key: '{{request.object.spec.sourceRef.namespace}}'
            operator: NotEquals
            value: default
      message: spec.sourceRef.namespace must be the same as metadata.namespace or
        'default'
  - exclude:
      resources:
        namespaces:
        - flux-system
        - flux-giantswarm
        - giantswarm
        - monitoring
    match:
      resources:
        kinds:
        - HelmRelease
    name: helmReleaseSourceRefNamespaceIsSafe
    preconditions:
      any:
      - key: '{{request.object.spec.chart.spec.sourceRef.namespace}}'
        operator: NotEquals
        value: ""
    validate:
      deny:
        conditions:
          all:
          - key: '{{request.object.spec.chart.spec.sourceRef.namespace}}'
            operator: NotEquals
            value: '{{request.object.metadata.namespace}}'
          - key: '{{request.object.spec.chart.spec.sourceRef.namespace}}'
            operator: NotEquals
            value: default
      message: spec.chart.spec.sourceRef.namespace must be the same as metadata.namespace
        or 'default'
  - exclude:
      resources:
        namespaces:
        - flux-system
        - flux-giantswarm
        - giantswarm
        - monitoring
    match:
      resources:
        kinds:
        - Kustomization
        - HelmRelease
    name: targetNamespaceMustBeLocal
    preconditions:
      any:
      - key: '{{request.object.spec.targetNamespace}}'
        operator: NotEquals
        value: ""
    validate:
      deny:
        conditions:
          all:
          - key: '{{request.object.spec.targetNamespace}}'
            operator: NotEquals
            value: '{{request.object.metadata.namespace}}'
          - key: '{{request.object.spec.targetNamespace}}'
            operator: NotEquals
            value: org-*
      message: spec.targetNamespace must be the same as metadata.namespace
  - exclude:
      resources:
        namespaces:
        - flux-system
        - flux-giantswarm
        - giantswarm
        - monitoring
    match:
      resources:
        kinds:
        - HelmRelease
    name: storageNamespaceMustBeLocal
    preconditions:
      any:
      - key: '{{request.object.spec.storageNamespace}}'
        operator: NotEquals
        value: ""
    validate:
      deny:
        conditions:
        - key: '{{request.object.spec.storageNamespace}}'
          operator: NotEquals
          value: '{{request.object.metadata.namespace}}'
      message: spec.storageNamespace must be the same as metadata.namespace
  - exclude:
      resources:
        namespaces:
        - flux-system
        - flux-giantswarm
        - giantswarm
        - monitoring
    match:
      resources:
        kinds:
        - Alert
    name: alertEventSourcesMustBeLocal
    validate:
      foreach:
      - list: request.object.spec.eventSources
        pattern:
          =(namespace): '{{request.object.metadata.namespace}}'
      message: spec.eventSources namespaces must be the same as metadata.namespace
  - exclude:
      resources:
        namespaces:
        - flux-system
        - flux-giantswarm
        - giantswarm
        - monitoring
    match:
      resources:
        kinds:
        - Receiver
    name: receiverResourcesMustBeLocal
    validate:
      foreach:
      - list: request.object.spec.resources
        pattern:
          =(namespace): '{{request.object.metadata.namespace}}'
      message: spec.resources namespaces must be the same as metadata.namespace
  - exclude:
      resources:
        namespaces:
        - flux-system
        - flux-giantswarm
        - giantswarm
        - monitoring
    match:
      resources:
        kinds:
        - Event
    name: eventsObjectMustBeLocal
    preconditions:
      any:
      - key: '{{request.object.spec.involvedObject.namespace}}'
        operator: NotEquals
        value: ""
    validate:
      message: spec.involvedObject namespace must be the same as metadata.namespace
      pattern:
        spec:
          involvedObject:
            =(namespace): '{{request.object.metadata.namespace}}'
  - exclude:
      resources:
        namespaces:
        - flux-system
        - flux-giantswarm
        - giantswarm
        - monitoring
    match:
      resources:
        kinds:
        - ImagePolicy
    name: imagePolicyRepositoryMustBeLocal
    preconditions:
      any:
      - key: '{{request.object.spec.imageRepositoryRef.namespace}}'
        operator: NotEquals
        value: ""
    validate:
      message: spec.imageRepositoryRef namespace must be the same as metadata.namespace
      pattern:
        spec:
          imageRepositoryRef:
            namespace: '{{request.object.metadata.namespace}}'
  validationFailureAction: enforce
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: allow-egress
  namespace: flux-system
spec:
  egress:
  - {}
  ingress:
  - from:
    - podSelector: {}
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: allow-scraping
  namespace: flux-system
spec:
  egress:
  - {}
  ingress:
  - ports:
    - port: 8080
      protocol: TCP
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: customer-flux
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: flux-app
  policyTypes:
  - Egress
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: customer-flux
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flux-app
    app.kubernetes.io/part-of: flux
    app.kubernetes.io/version: 0.27.3
    giantswarm.io/service_type: managed
    helm.sh/chart: flux-app-0.10.0
  name: allow-webhooks
  namespace: flux-system
spec:
  ingress:
  - from:
    - namespaceSelector: {}
  podSelector:
    matchLabels:
      app: notification-controller
      app.kubernetes.io/instance: customer-flux
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: flux-app
  policyTypes:
  - Ingress
